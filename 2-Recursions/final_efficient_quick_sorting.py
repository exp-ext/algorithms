"""
B. Эффективная быстрая сортировка

Тимофей решил организовать соревнование по спортивному программированию,
чтобы найти талантливых стажёров. Задачи подобраны, участники
зарегистрированы, тесты написаны. Осталось придумать, как в конце
соревнования будет определяться победитель.

Каждый участник имеет уникальный логин. Когда соревнование закончится,
к нему будут привязаны два показателя: количество решённых задач Pi и
размер штрафа Fi. Штраф начисляется за неудачные попытки и время,
затраченное на задачу.

Тимофей решил сортировать таблицу результатов следующим образом: при
сравнении двух участников выше будет идти тот, у которого решено больше
задач. При равенстве числа решённых задач первым идёт участник с меньшим
штрафом. Если же и штрафы совпадают, то первым будет тот, у которого логин
идёт раньше в алфавитном (лексикографическом) порядке.

Тимофей заказал толстовки для победителей и накануне поехал за ними в
магазин. В своё отсутствие он поручил вам реализовать алгоритм быстрой
сортировки (англ. quick sort) для таблицы результатов. Так как Тимофей
любит спортивное программирование и не любит зря расходовать оперативную
память, то ваша реализация сортировки не может потреблять O(n) дополнительной
памяти для промежуточных данных (такая модификация быстрой сортировки
называется "in-place").

Как работает in-place quick sort
Как и в случае обычной быстрой сортировки, которая использует дополнительную
память, необходимо выбрать опорный элемент (англ. pivot), а затем
переупорядочить массив. Сделаем так, чтобы сначала шли элементы, не
превосходящие опорного, а затем —– большие опорного.

Затем сортировка вызывается рекурсивно для двух полученных частей. Именно
на этапе разделения элементов на группы в обычном алгоритме используется
дополнительная память. Теперь разберёмся, как реализовать этот шаг in-place.

Пусть мы как-то выбрали опорный элемент. Заведём два указателя left и
right, которые изначально будут указывать на левый и правый концы отрезка
соответственно. Затем будем двигать левый указатель вправо до тех пор,
пока он указывает на элемент, меньший опорного. Аналогично двигаем правый
указатель влево, пока он стоит на элементе, превосходящем опорный. В итоге
окажется, что что левее от left все элементы точно принадлежат первой группе,
а правее от right — второй. Элементы, на которых стоят указатели, нарушают
порядок. Поменяем их местами (в большинстве языков программирования
используется функция swap()) и продвинем указатели на следующие элементы.
Будем повторять это действие до тех пор, пока left и right не столкнутся.
На рисунке представлен пример разделения при pivot=5.
Указатель left — голубой, right — оранжевый.

Формат ввода
В первой строке задано число участников n, 1 ≤ n ≤ 100 000.
В каждой из следующих n строк задана информация про одного из участников.
i-й участник описывается тремя параметрами:

уникальным логином (строкой из маленьких латинских букв длиной не более 20)
числом решённых задач Pi
штрафом Fi
Fi и Pi — целые числа, лежащие в диапазоне от 0 до 109.
Формат вывода
Для отсортированного списка участников выведите по порядку их логины по одному
в строке.

Пример 1
Ввод
5
alla 4 100
gena 6 1000
gosha 2 90
rita 2 90
timofey 4 80

Вывод
gena
timofey
alla
gosha
rita
"""

# {
# 'ID':'81029757',
# 'Вердикт': 'OK',
# 'Время':'1.483s',
# 'Память':'22.86Mb',
# }

# import random


# def quicksort(interns: list) -> list:
#     """
#     Проверяет, что длина входного списка "interns" меньше или равна 1.
#     Если равна, возвращает список как есть, поскольку он уже отсортирован.
#     В противном случае он выбирает случайный элемент списка в качестве
#     опорного элемента, используя метод random.choice.
#     Затем он создает три отдельных списка, используя метод list
#     comprehension:
#     l_list: список элементов interns, которые меньше опорного элемента
#     e_list: список элементов interns, которые равны опорному элементу
#     b_list: список элементов interns, которые больше опорного элемента
#     Потом идёт рекурсивный вызов функции quicksort для списков l_nums и
#     b_nums,
#     и в конечном итоге конкатенацией результатов этих рекурсивных вызовов со
#     списком e_nums, что она и возвращает в итоге.
#     """

#     if len(interns) <= 1:
#         return interns
#     q = random.choice(interns) 
#     l_list = [n for n in interns if n < q]
#     e_list = [q] * interns.count(q)
#     b_list = [n for n in interns if n > q]
#     return quicksort(l_list) + e_list + quicksort(b_list)

# {
# 'ID':'81143128',
# 'Вердикт': 'OK',
# 'Время':'0.931s',
# 'Память':'20.14Mb',
# }


# def quicksort(interns: list, start: int, end: int) -> list:
#     """
#     Функция разбивает исходный список по местам, меняя местами элементы
#     по мере итерации. Она использует два указателя: один, который начинается
#     в начале списка, и другой, который начинается в конце списка и
#     движется к центру. Элементы, которые меньше опорного, перемещаются влево,
#     а элементы, которые больше опорного, перемещаются вправо.
#     """

#     if start >= end:
#         return interns

#     pivot = interns[end]
#     pivot_index = start

#     for i in range(start, end):
#         if interns[i] < pivot:
#             interns[i], interns[pivot_index] = interns[pivot_index], interns[i]
#             pivot_index += 1

#     interns[pivot_index], interns[end] = interns[end], interns[pivot_index]

#     quicksort(interns, start, pivot_index - 1)
#     quicksort(interns, pivot_index + 1, end)

# {
# 'ID':'81162203',
# 'Вердикт': 'OK',
# 'Время':'0.91s',
# 'Память':'20.14Mb',
# }


def quicksort(interns, start, end):
    """
    Эта версия алгоритма сортировки сортирует входной список, переставляя
    элементы внутри списка, а не создавая новый, что минимизирует
    использование памяти. В качестве опорного элемента выбирается средний
    подмассива, а разбиение выполняется путем перестановки элементов до
    тех пор, пока все элементы слева от опорного не станут меньше, а все
    элементы справа от опорного - больше. Затем функция рекурсивно вызывает
    себя на левом и правом разделах стержня.

    Ключевой момент заключается в том, что опорный элемент должен быть выбран
    таким образом, чтобы он находился как можно ближе к середине, это
    обеспечит максимальную сбалансированность левого и правого разделов
    и алгоритм будет работать оптимально.
    """

    if start >= end:
        return
    i, j = start, end
    pivot = interns[(start + end) // 2]
    while i <= j:
        while interns[i] < pivot:
            i += 1
        while interns[j] > pivot:
            j -= 1
        if i <= j:
            interns[i], interns[j] = interns[j], interns[i]
            i, j = i + 1, j - 1
    quicksort(interns, start, j)
    quicksort(interns, i, end)
    return interns


def definite_order(login: str, p: int, f: int) -> tuple:
    """
    Возвращает кортеж с:
    -   p (:obj:`int`) - количество решённых задач с отрицательным значением,
    -   f (:obj:`int`) - размер штрафа,
    -   login (:obj:`str`) - имя стажёра,

    исходя из решения Тимофея о порядке сортировки.
    """
    return (-int(p), int(f), login)


if __name__ == '__main__':
    n = int(input())
    interns = list(definite_order(*input().split()) for _ in range(n))
    result = quicksort(interns, 0, len(interns) - 1)
    print(*(login for _, _, login in interns), sep="\n")
