"""
B. Комбинации

На клавиатуре старых мобильных телефонов каждой цифре соответствовало
несколько букв. Примерно так:
2:'abc',
3:'def',
4:'ghi',
5:'jkl',
6:'mno',
7:'pqrs',
8:'tuv',
9:'wxyz'

Вам известно в каком порядке были нажаты кнопки телефона, без учета повторов.
Напечатайте все комбинации букв, которые можно набрать такой
последовательностью нажатий.

Формат ввода
На вход подается строка, состоящая из цифр 2-9 включительно. Длина строки не
превосходит 10 символов.

Формат вывода
Выведите все возможные комбинации букв через пробел.

Ввод
23

Вывод
ad ae af bd be bf cd ce cf
"""

MAPPING = {
    '2': 'abc',
    '3': 'def',
    '4': 'ghi',
    '5': 'jkl',
    '6': 'mno',
    '7': 'pqrs',
    '8': 'tuv',
    '9': 'wxyz'
}


# def generate_combinations(clicks):
#     """
#     Функция generate_combinations принимает строку кликов (цифры 2-9) и
#     генерирует все возможные комбинации букв. Он использует картографический
#     словарь для сопоставления каждой цифры с соответствующими буквами. Затем
#     он использует цикл for для перебора кликов, и для каждого клика
#     генерирует
#     новые комбинации, добавляя соответствующую букву к существующим
#     комбинациям.Наконец, он возвращает список всех возможных комбинаций.
#     """
#     result = ['']
#     for click in clicks:
#         temp = []
#         for letter in MAPPING[click]:
#             for item in result:
#                 temp.append(item + letter)
#         result = temp
#     return result


def generate_combinations(clicks):
    """
    Функция generate_combinations принимает строку кликов (цифры 2-9)
    и генерирует все возможные комбинации букв с использованием рекурсии.
    Он использует картографический словарь для сопоставления каждой цифры
    с соответствующими буквами. Если входная строка пуста, она возвращает
    пустую строку в качестве базового варианта. В противном случае он
    выполняет рекурсивный вызов функции со строкой кликов минус первая
    цифра, это даст все подкомбинации. Затем он создает окончательные
    буквенные комбинации, добавляя первые цифровые буквы к вложенным
    комбинациям. Наконец, он возвращает список всех возможных комбинаций.
    """

    if len(clicks) == 0:
        return ['']
    sub_combinations = generate_combinations(clicks[1:])
    letter_combinations = []
    for letter in MAPPING[clicks[0]]:
        for combination in sub_combinations:
            letter_combinations.append(letter+combination)
    return letter_combinations


if __name__ == '__main__':
    clicks = input()
    print(*generate_combinations(clicks))
