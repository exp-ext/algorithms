"""
L. Два велосипеда

Вася решил накопить денег на два одинаковых велосипеда — себе и сестре. У Васи
есть копилка, в которую каждый день он может добавлять деньги (если, конечно,
у него есть такая финансовая возможность). В процессе накопления Вася не
вынимает деньги из копилки.

У вас есть информация о росте Васиных накоплений — сколько у Васи в копилке
было денег в каждый из дней.

Ваша задача — по заданной стоимости велосипеда определить

первый день, в которой Вася смог бы купить один велосипед,
и первый день, в который Вася смог бы купить два велосипеда.
Подсказка: решение должно работать за O(log n).

Формат ввода
В первой строке дано число дней n, по которым велись наблюдения за Васиными
накоплениями. 1 ≤ n ≤ 106.

В следующей строке записаны n целых неотрицательных чисел. Числа идут в
порядке неубывания. Каждое из чисел не превосходит 106.

В третьей строке записано целое положительное число s — стоимость велосипеда.
Это число не превосходит 106.

Формат вывода
Нужно вывести два числа — номера дней по условию задачи.

Если необходимой суммы в копилке не нашлось, нужно вернуть -1 вместо номера
дня.

Пример 1
Ввод
6
1 2 4 4 6 8
3
Вывод
3 5
"""


def find_days(n, savings, cost):
    """
    Функция find_day принимает количество дней (n), список сбережений
    за каждый день и стоимость велосипеда. Он перебирает сбережения и
    отслеживает первый день, когда у Васи накопилось достаточно сбережений,
    чтобы купить один велосипед, и первый день, когда у Васи накопилось
    достаточно сбережений, чтобы купить два велосипеда. Функция возвращает
    кортеж из двух дней, и если у Васи никогда не было достаточно сбережений,
    она возвращает -1 вместо номера дня.
    """
    first_bike = -1
    second_bike = -1
    for i in range(n):
        if savings[i] >= cost and first_bike == -1:
            first_bike = i + 1
        if savings[i] >= 2 * cost and second_bike == -1:
            second_bike = i + 1
            break
    return (first_bike, second_bike)


if __name__ == '__main__':
    n = int(input())
    savings = list(map(int, input().split()))
    cost = int(input())
    print(*find_days(n, savings, cost))
